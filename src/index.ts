import { chromium } from 'playwright';
import { Browser } from './browser-adaptor/browser.js';
import { CaptchaActionState, CaptchaActionTypes } from './llm-connectors/llm-connector.js';
import type { CaptchaAction, WrappedSchema } from './llm-connectors/llm-connector.js';
import { GeminiConnector } from './llm-connectors/impl/gemini.js';

async function visitCaptchaSite() {
    // Launch the browser
    const browser = await chromium.launch({ headless: false });
    const browserWrapper = new Browser({ headless: false }, browser);
    const context = await browserWrapper.newContext();
    await context.createNewTab();
    const page = await context.getCurrentPage();

    // Navigate to the specified URL
    console.log('Navigating to captcha demo site...');
    await page.goto('https://www.google.com/recaptcha/api2/demo');

    await context.refreshPage();

    const clickAction: CaptchaAction = {
        action: CaptchaActionTypes.Click,
        location: {
            x: "28%",
            y: "53%"
        },
        actionState: CaptchaActionState.CreatingAction,
    };

    let state = await context.getState();

    context.queueCaptchaAction(clickAction);

    // await context.solveCaptcha();

    state = await context.getState();

    // print iframe states
    console.log(state)


    // Wait for a few seconds
    const waitTimeSeconds = 2000;
    console.log(`Waiting for ${waitTimeSeconds} seconds...`);
    await page.waitForTimeout(waitTimeSeconds * 1000);

    // Close the browser
    console.log('Closing browser...');
    await context.close();
}

async function queryGemini(query: string, imageBase64?: string, schema?: WrappedSchema<string>) {
    const connector = new GeminiConnector();
    const response = await connector.queryWithImage(query, imageBase64, schema);
    console.log('Gemini response:', response);
}

const testImage = ""


// console.log(await queryGemini("Please describe the following image", testImage, z.object({ response: z.string() })));

// Execute the function
visitCaptchaSite()
    .then(() => console.log('Done!'))
    .catch(error => {
        console.error('Error occurred:', error);
        process.exit(1);
    });